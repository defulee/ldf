#!/bin/bash

fmt_cmd (){
    echo -e $1 | awk -F'\t' '{
        if (length($1) < 20) {
            printf "%-20s%s\n",$1,$2
        } else {
            print $1;
            printf "%-20s%s\n", "", $2
        }
    }'
}

fmt_title (){
    keyword_length=`echo "$1" |wc -c`
    let "prefix_length = (30-keyword_length) / 2"
    for i in `seq 0 ${prefix_length}` ;do
	    echo -n '-'
    done
    echo -n " $1 "
    let "suffix_length = keyword_length % 2 != 0 ? prefix_length+1: prefix_length"
    for i in `seq 0 $suffix_length` ;do
	    echo -n '-'
    done
    echo ''
}

function fmt_bold() {
    echo -e "$(tput bold)$*$(tput sgr0)"
}

function fmt_ul() {
    echo -e "$(tput smul)$*$(tput rmul)"
}

################################################################################
# DESC: Prints a formatted message of the selected option by the user to stdout
# ARGS: $* (required): String to print (usually provided by other functions)
# OUTS: None
################################################################################
function fmt_error() {
    local bold=$(tput bold)
    local red=$(tput setaf 1)
    local reset=$(tput sgr0)
    local msg=${*:-"${reset}Error: No message passed"}
    
    echo -e "${bold}${red}${msg}${reset}\n"
}

################################################################################
# DESC: Checks to make sure the user has the appropriate utilities installed
# ARGS: None
# OUTS: None
################################################################################
function check_utils() {
    local msg="not found. Please make sure this is installed and in PATH."

    command -v awk >/dev/null 2>&1 || { echo >&2 "awk ${msg}"; exit 1; }
    command -v basename >/dev/null 2>&1 || { echo >&2 "basename ${msg}"; exit 1; }
    command -v cat >/dev/null 2>&1 || { echo >&2 "cat ${msg}"; exit 1; }
    command -v column >/dev/null 2>&1 || { echo >&2 "column ${msg}"; exit 1; }
    command -v echo >/dev/null 2>&1 || { echo >&2 "echo ${msg}"; exit 1; }
    # command -v git >/dev/null 2>&1 || { echo >&2 "git ${msg}"; exit 1; }
    command -v grep >/dev/null 2>&1 || { echo >&2 "grep ${msg}"; exit 1; }
    command -v head >/dev/null 2>&1 || { echo >&2 "head ${msg}"; exit 1; }
    command -v seq >/dev/null 2>&1 || { echo >&2 "seq ${msg}"; exit 1; }
    command -v sort >/dev/null 2>&1 || { echo >&2 "sort ${msg}"; exit 1; }
    command -v tput >/dev/null 2>&1 || { echo >&2 "tput ${msg}"; exit 1; }
    command -v tr >/dev/null 2>&1 || { echo >&2 "tr ${msg}"; exit 1; }
    command -v uniq >/dev/null 2>&1 || { echo >&2 "uniq ${msg}"; exit 1; }
    command -v wc >/dev/null 2>&1 || { echo >&2 "wc ${msg}"; exit 1; }
}

# 绘制直方图， 输入格式为：多行，每行格式为：keyword count 或者 count keyword
# 参数：keyword_col，候选：1，2 默认1
function histogram() {
    keyword_col=${1:-1}
    awk -v keyword_col="${keyword_col}" '{
        if (keyword_col==1){
            split ($0, arr)
            str_len=length($0)
            arr_len=length(arr)
            cnt=arr[arr_len]
            cnt_len=length(cnt)
            keyword=substr($0,0,str_len-cnt_len)
            count[keyword] = cnt
            total += cnt
        } else {
            len=length($1)
            keyword=substr($0,len)
            count[keyword] = $1 
            total += $1
        }
    } 
    END{ 
        for (k in count) {
            printf(k, count[k]);
        }
        for (k in count) {
            s="|";
            if (total > 0) {
                percent = ((count[k] / total) * 100);
                for (i = 1; i <= percent; ++i) {
                    s=s"▇"
                }
                printf( "\t%s\t%s\t%s %s\n", k, count[k], s, percent"%");
            }
        }
    }
    '
}

# 读取文件内容，兼容.gz文件格式
function scat() {
    if [ "${1##*.}"x = "gz"x ];then
        zcat "${1}" 
    else
        cat "${1}"
    fi
}
